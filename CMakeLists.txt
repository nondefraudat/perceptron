cmake_minimum_required(VERSION 3.21)

project(perceptron LANGUAGES CXX CUDA)

# General

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/lib_d")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/lib_d")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/bin_d")

set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# CUDA

find_package(CUDAToolkit REQUIRED)

set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)

set(CMAKE_CUDA_ARCHITECTURES 50 52 60 61 70 72 75 80 86 87 89 90 100 101 120)
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Wno-deprecated-gpu-targets")
set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --extended-lambda")

# GPU-Math

add_subdirectory("dependencies/gpu-math")
set(GPU_MATH_INCLUDE "dependencies/gpu-math/include")
set(GPU_MATH_LIBRARY "gpu-math")

# Tatget

set(PERCEPTRON_EXECUTABLE ${PROJECT_NAME})

file(GLOB_RECURSE PERCEPTRON_SOURCES "sources/*.cu")
set(PERCEPTRON_INCLUDE "include")

add_executable(${PERCEPTRON_EXECUTABLE} ${PERCEPTRON_SOURCES})
target_link_libraries(${PERCEPTRON_EXECUTABLE} PUBLIC
		${GPU_MATH_LIBRARY})
target_include_directories(${PERCEPTRON_EXECUTABLE} PUBLIC
		${PERCEPTRON_INCLUDE} ${GPU_MATH_INCLUDE})
